#!/bin/env python3
import json
import glob
import os.path

with open("_defaultConfigs/_newDefault.js") as f:
    default_config = f.read()
default_config = json.dumps(default_config.replace("\n", "\r\n"))

configs = {}
for fn in glob.glob("_defaultConfigs/*.js"):
    basename = os.path.basename(fn)
    if basename[0] == '_':
        continue
    with open(fn) as f:
        configs[basename[:-3]] = f.read()

config_count = len(configs)
configs = ",\n".join("{}, {}".format(
    json.dumps(k + " (build-in)"),
    json.dumps(v.replace("\n", "\r\n").replace("   ", "\t")))
    for k, v in sorted(configs.items()))


template = """/// This file is auto-generated by CoverPositionsCompile.py

static const char* configs[{array_len}] = {{
{configs},
nullptr }};

const char** builtInCoverConfigs = static_cast<const char**>(configs);

const char* defaultCoverConfig = {default};
"""
new_content = template.format(configs=configs, array_len=config_count*2 + 1,
                              default=default_config);

made_changes = False
out_file = 'lib/cover_configs.cpp'
with open(out_file, "r+", newline="\n") as f:
    old_content = f.read()
    if old_content != new_content:
        made_changes = True
        f.seek(0)
        f.truncate()
        f.write(new_content)

if made_changes:
    print("cover configs updated")
else:
    print("cover configs unchanged")
