static const char* def_cfg_coverConfigs[] = {\
"Parabola", "// General Notes:\r\n// Most of these functions return an array with 3 elements\r\n// These are the x,y,z coordinates in 3d-space\r\n// x is left to right\r\n// y is bottom to top\r\n// z is front to back\r\n\r\n\r\n/************************* COVER DISPLAY *****************/\r\n// These functions define the Display of the single Covers\r\n// The given parameter coverId is a floating point number.\r\n// It is 0 for the center cover, 1 for the one right\r\n// beneath it, -1 for the one on the left side and so on.\r\n// During movement the values float between the integer\r\n// values.\r\nfunction coverPosition(coverId){\r\n   var x, y, z;\r\n   x = coverId*1.1;\r\n   y = coverId*coverId/5;\r\n   z = -Math.abs(coverId);\r\n   return new Array(x, y, z);\r\n}\r\n// return array is (angle, x, ,y, z) - this rotates\r\n// the cover *angle* degrees around the vector (x,y,z)\r\n// With (0,0,0,0) the cover is parallel to the y-z-Plane\r\nfunction coverRotation(coverId){\r\n   var angle;\r\n   angle = -(coverId)*20;\r\n   return new Array(angle,0,1,0);\r\n}\r\n\r\n// Sets which point of the cover coverPosition() defines\r\n// (-1,-1) means bottom left, (0,0) means center,\r\n// (1,1) means top right, (0, -1) means bottom center etc.\r\n// The cover is also rotated around this point.\r\nfunction coverAlign(coverId){\r\n   return new Array(0, -1);\r\n}\r\n\r\n// Defines the the size boundaries for the cover.\r\n// Aspect ratio is preserved.\r\n// Return Array is (widht, height)\r\nfunction coverSizeLimits(coverId){\r\n   return new Array(1, 2);\r\n}\r\n\r\n// Defines the range of covers to draw.\r\n// Return array is (leftmostCover, rightmostCover)\r\n// This interval shouldn\'t be larger than 80\r\n// The center cover is 0.\r\nfunction drawCovers(){\r\n   return new Array(-10, 10);\r\n}\r\n\r\n\r\n// In which direction should the fov be expanded/shrinked\r\n// when the panel is resized?\r\n// If this returns (0,1), the height is fixed.\r\n// If this returns (1,0), the width is fixed.\r\n// You can also return stuff like (0.5,0.5) or (7, 3)\r\n// The values determine how important it is for this\r\n// dimension to stay fixed.\r\nfunction aspectBehaviour(){\r\n   return new Array(0.5,0.5);\r\n}\r\n\r\n/************************** CAMMERA SETUP ****************/\r\n// Position of the viewport\r\nfunction eyePos(){\r\n	return new Array(0, 1, 6);\r\n}\r\n// Defines the point for the eye to look at\r\nfunction lookAt(){\r\n   return new Array(0, 1, 0);\r\n}\r\n// Used to rotate the view.\r\n// The returned Vector points upwards in the viewport.\r\n// This vector must not be parallel to the line of sight from the\r\n// eyePos point to the lookAt point.\r\nfunction upVector(){\r\n   return new Array(0, 1, 0);   \r\n}\r\n\r\n/************************** MIRROR SETUP *****************/\r\nfunction showMirrorPlane(){\r\n   return true; // return false to hide the mirror\r\n}\r\n// Any Point on the Mirror Plane\r\nfunction mirrorPoint (){\r\n   return new Array(0, 0, 0);\r\n}\r\n// Normal of the Mirror Plane\r\nfunction mirrorNormal (){\r\n   return new Array(0, 1, 0);\r\n}",  \
"Spiral", "// General Notes:\r\n// Most of these functions return an array with 3 elements\r\n// These are the x,y,z coordinates in 3d-space\r\n// x is left to right\r\n// y is bottom to top\r\n// z is front to back\r\n\r\n\r\n/************************* COVER DISPLAY *****************/\r\n// These functions define the Display of the single Covers\r\n// The given parameter coverId is a floating point number.\r\n// It is 0 for the center cover, 1 for the one right\r\n// beneath it, -1 for the one on the left side and so on.\r\n// During movement the values float between the integer\r\n// values.\r\n\r\nvar outerRadius = 1.3;\r\nvar verticalSpacing = 1.7;\r\n\r\n// Some geometry (this is a regular polygon)\r\nvar sidelength = 1;\r\nvar n = Math.PI / Math.asin(sidelength / (2*outerRadius))\r\nvar a = Math.PI / n;\r\nvar factor = 2*Math.PI / n;\r\nvar innerRadius = outerRadius * Math.cos(a);\r\n\r\nfunction coverPosition(coverId){\r\n   var x, y, z;\r\n   x = Math.sin(coverId*factor)*innerRadius;\r\n   y = coverId*verticalSpacing/n;\r\n   z = Math.cos(coverId*factor)*innerRadius;\r\n   return new Array(x, y, z);\r\n}\r\n// return array is (angle, x, ,y, z) - this rotates\r\n// the cover *angle* degrees around the vector (x,y,z)\r\n// With (0,0,0,0) the cover is parallel to the y-z-Plane\r\nfunction coverRotation(coverId){\r\n   // We use radian but have to return degrees\r\n   var angle = (coverId*factor)/Math.PI * 180;\r\n   return new Array(angle, 0, 1, 0);\r\n}\r\n\r\n// Sets which point of the cover coverPosition() defines\r\n// (-1,-1) means bottom left, (0,0) means center,\r\n// (1,1) means top right, (0, -1) means bottom center etc.\r\n// The cover is also rotated around this point.\r\nfunction coverAlign(coverId){\r\n   return new Array(0, -1);\r\n}\r\n\r\n// Defines the the size boundaries for the cover.\r\n// Aspect ratio is preserved.\r\n// Return Array is (widht, height)\r\nfunction coverSizeLimits(coverId){\r\n   return new Array(sidelength, verticalSpacing*0.85);\r\n}\r\n\r\n// Defines the range of covers to draw.\r\n// Return array is (leftmostCover, rightmostCover)\r\n// This interval shouldn\'t be larger than 80\r\n// The center cover is 0.\r\nfunction drawCovers(){\r\n   return new Array(-15, 18);\r\n}\r\n\r\n\r\n// In which direction should the fov be expanded/shrinked\r\n// when the panel is resized?\r\n// If this returns (0,1), the height is fixed.\r\n// If this returns (1,0), the width is fixed.\r\n// You can also return stuff like (0.5,0.5) or (7, 3)\r\n// The values determine how important it is for this\r\n// dimension to stay fixed.\r\nfunction aspectBehaviour(){\r\n   return new Array(1, 0);\r\n}\r\n\r\n/************************** CAMMERA SETUP ****************/\r\n// Position of the viewport\r\nfunction eyePos(){\r\n	return new Array(0.5, 0.9, outerRadius*4);\r\n}\r\n// Defines the point for the eye to look at\r\nfunction lookAt(){\r\n   return new Array(0.5, 0.9, 0);\r\n}\r\n// Used to rotate the view.\r\n// The returned Vector points upwards in the viewport.\r\n// This vector must not be parallel to the line of sight from the\r\n// eyePos point to the lookAt point.\r\nfunction upVector(){\r\n   return new Array(0, 1, 0);\r\n}\r\n\r\n/************************** MIRROR SETUP *****************/\r\nfunction showMirrorPlane(){\r\n   return true; // return false to hide the mirror\r\n}\r\n// Any Point on the Mirror Plane\r\nfunction mirrorPoint (){\r\n   return new Array(outerRadius , 0, 0);\r\n}\r\n// Normal of the Mirror Plane\r\nfunction mirrorNormal (){\r\n   return new Array(1, 0, 0);\r\n}",  \
"Standart Coverflow", "// General Notes:\r\n// Most of these functions return an array with 3 elements\r\n// These are the x,y,z coordinates in 3d-space\r\n// x is left to right\r\n// y is bottom to top\r\n// z is front to back\r\n\r\n\r\n/************************* COVER DISPLAY *****************/\r\n// These functions define the Display of the single Covers\r\n// The given parameter coverId is a floating point number.\r\n// It is 0 for the center cover, 1 for the one right\r\n// beneath it, -1 for the one on the left side and so on.\r\n// During movement the values float between the integer\r\n// values.\r\nfunction coverPosition(coverId){\r\n   var x, y, z;\r\n   y = 0;\r\n   if (Math.abs(coverId) <= 1){ // The centered cover\r\n      z = 1 + 3 * (1 - Math.abs(coverId));\r\n      x = coverId;\r\n   } else { // The covers on the side\r\n      z = 1 - (Math.abs(coverId)-1) * 0.15;\r\n      x = 1 + 0.5 * (Math.abs(coverId)-1);\r\n      if (coverId < 0)\r\n         x *= -1;\r\n   }\r\n   return new Array(x, y, z);\r\n}\r\n// return array is (angle, x, ,y, z) - this rotates\r\n// the cover *angle* degrees around the vector (x,y,z)\r\n// With (0,0,0,0) the cover is parallel to the y-z-Plane\r\nfunction coverRotation(coverId){\r\n   var angle;\r\n   if (Math.abs(coverId) < 1){ // The centered cover\r\n      angle = coverId * -70;\r\n   } else { // The covers on the side\r\n      if (coverId > 0)\r\n         angle = -70;\r\n      else\r\n         angle = 70;\r\n   }\r\n   return new Array(angle, 0, 1, 0);\r\n}\r\n\r\n// Sets which point of the cover coverPosition() defines\r\n// (-1,-1) means bottom left, (0,0) means center,\r\n// (1,1) means top right, (0, -1) means bottom center etc.\r\n// The cover is also rotated around this point.\r\nfunction coverAlign(coverId){\r\n   return new Array(0, -1);\r\n}\r\n\r\n// Defines the the size boundaries for the cover.\r\n// Aspect ratio is preserved.\r\n// Return Array is (widht, height)\r\nfunction coverSizeLimits(coverId){\r\n   if (Math.abs(coverId) < 1){ // The centered cover\r\n      var w, h;\r\n      w = 1;\r\n      h = 1;\r\n      // Shrinks the centered cover to a height of 1\r\n      if (Math.abs(coverId) > 0.5)\r\n         h = 1 + (Math.abs(coverId) - 0.5)*2;\r\n      // Allows the centered cover to have a width of 2.5;\r\n      if (Math.abs(coverId) < 0.5)\r\n         w = 1 + (0.5 - Math.abs(coverId))*3;\r\n      return new Array(w, h);\r\n   } else { // The covers on the side\r\n      return new Array(1, 2);\r\n   }\r\n}\r\n\r\n// Defines the range of covers to draw.\r\n// Return array is (leftmostCover, rightmostCover)\r\n// This interval shouldn\'t be larger than 80\r\n// The center cover is 0.\r\nfunction drawCovers(){\r\n   return new Array(-20, 20);\r\n}\r\n\r\n\r\n// In which direction should the fov be expanded/shrinked\r\n// when the panel is resized?\r\n// If this returns (0,1), the height is fixed.\r\n// If this returns (1,0), the width is fixed.\r\n// You can also return stuff like (0.5,0.5) or (7, 3)\r\n// The values determine how important it is for this\r\n// dimension to stay fixed.\r\nfunction aspectBehaviour(){\r\n   return new Array(0,1);\r\n}\r\n\r\n/************************** CAMMERA SETUP ****************/\r\n// Position of the viewport\r\nfunction eyePos(){\r\n	return new Array(0, 0.5, 6);\r\n}\r\n// Defines the point for the eye to look at\r\nfunction lookAt(){\r\n   return new Array(0, 0.5, 0);\r\n}\r\n// Used to rotate the view.\r\n// The returned Vector points upwards in the viewport.\r\n// This vector must not be parallel to the line of sight from the\r\n// eyePos point to the lookAt point.\r\nfunction upVector(){\r\n   return new Array(0, 1, 0);   \r\n}\r\n\r\n/************************** MIRROR SETUP *****************/\r\nfunction showMirrorPlane(){\r\n   return true; // return false to hide the mirror\r\n}\r\n// Any Point on the Mirror Plane\r\nfunction mirrorPoint (){\r\n   return new Array(0, 0, 0);\r\n}\r\n// Normal of the Mirror Plane\r\nfunction mirrorNormal (){\r\n   return new Array(0, 1, 0);\r\n}",  \
""};